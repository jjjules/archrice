#!/usr/bin/python
#
# Script that automatically checks (and pull if possible) all git repos as
# defined in the configuration file. Repositories are defined by paths relative
# to BASE_PATH (HOME by default).
#
# The configuration file is located in XDG_CONFIG_HOME (falls back to $HOME/.config) and
# is called `gch.config`. An example configuration file that search for all git repositories
# recursively in `documents/`, discard all repos in 'documents/my-old-company/`, and check
# also `anotherrepo1` in HOME and `anotherrepo2` in the `images` folder would look like this:
#
# [recursive_folders]
# documents
#
# [exclude_patterns]
# my-old-company
#
# [other_repositories]
# anotherrepo1
# images/anotherrepo2
#
# Note: environment varialbes can be used in the configuration file but not combined in a path.
# That is the line `PATH_TO_REPO` is converted to its value but it must be exclusively
# the environment variable name in the line and it must be an absolute path. Env. variables are
# not allowed for `exclude_patterns`.
#
# Inspired from https://github.com/Gorzen/.files/blob/master/.local/bin/dirty-git-epfl


import re
import os
import sys
import tty
import termios
import argparse
import configparser
import subprocess as sp
import multiprocessing


BASE_PATH = os.environ["HOME"]
ENDC = '\033[0m'
FAIL = '\033[91m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

def read_config():
    configdir = os.environ.get('XDG_CONFIG_HOME', '')
    if not configdir:
        configdir = f"{os.environ.get('HOME', '')}/.config"

    configpath = f'{configdir}/gch.config'

    if not os.path.isfile(configpath):
        print('No configuration file. Exiting...')
        sys.exit(1)

    config = configparser.ConfigParser(allow_no_value=True)
    config.optionxform = str
    config.read(configpath)

    config_dict = {}
    for section in ['recursive_folders', 'other_repositories']:
        if section not in config:
            continue

        section_paths = []
        for value in config[section]:
            if os.path.isabs(value) and os.path.isdir(value):
                section_paths.append(value)
            elif os.path.isdir((path := f'{BASE_PATH}/{value}')):
                section_paths.append(path)
            else:
                expanded_value = os.environ.get(value, '')

                if os.path.isdir(expanded_value):
                    section_paths.append(expanded_value)
                else:
                    print(f'Error in config file at line {value}: value not valid')
                    print('Ignoring and continuing...')

        config_dict[section] = section_paths

    config_dict['exclude_patterns'] = []
    if 'exclude_patterns' in config:
        for pat in config['exclude_patterns']:
            config_dict['exclude_patterns'].append(pat)


    return config_dict

def run_command(cmd, cwd=".", errors=None):
    stdout, stderr = sp.Popen(
        cmd.split(" "), stdout=sp.PIPE, stderr=sp.PIPE, cwd=cwd
    ).communicate()

    if stderr:
        error_msg = f"ERROR when running '{cmd}':\n{stderr.decode()}"

        if errors is not None:
            errors.append(error_msg)
        else:
            print(error_msg)

    return stdout.decode()


def get_repos(config):
    found_repos = []
    find_git_repo_cmd = r"find {} -name '.git' -type d | sed 's/\.git$//'"
    for dir_ in config['recursive_folders']:
        stream = os.popen(find_git_repo_cmd.format(dir_))
        output = stream.read().split('\n')
        found_repos += list(filter(None, output))

    all_repos = config['other_repositories'] + found_repos

    return all_repos


def filter_repos(repos, exclude_patterns):
    repos = list(filter(os.path.isdir, repos))
    repos = list(filter(lambda repo: all([pat not in repo for pat in exclude_patterns]), repos))

    return repos


def fetch_repos(repos, verbose):
    if verbose:
        print('Fetching following repositories:')
        for repo in repos:
            print(f'\t- {repo}')
        print()

    errors = []
    jobs = []
    for repo in repos:
        process = multiprocessing.Process(target=run_command, args=("git fetch", repo, errors))
        jobs.append(process)

    for j in jobs:
        j.start()

    printProgressBar(0, len(jobs))
    for i, j in enumerate(jobs):
        j.join()
        printProgressBar(i + 1, len(jobs))

    for error_msg in errors:
        error_msg and print(error_msg)

def printProgressBar(iteration, total, length=50, fill="â–ˆ"):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = "%.1f" % (100 * iteration / float(total))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + "-" * (length - filledLength)
    print("\rProgress: |%s| %s%% Complete" % (bar, percent), end="\r")
    # Print New Line on Complete
    if iteration == total:
        print('\n')

def ask_input(prompt):
    print(prompt, end=' ', flush=True)
    # key_read = readchar.readkey()
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        key_read = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

    return key_read

def print_dirty_repos(repos):
    dirty_report = []
    # Longest repo string length
    max_length = len(max(repos, key=len))
    all_clean = True

    for repo in repos:
        repo_short_name = re.sub(rf'^{BASE_PATH}/', '', repo)

        git_branch = run_command("git branch -vv --color=always", cwd=repo)
        git_branch = re.sub(r'\][^\n]*', ']', git_branch)
        git_current_branch = '\n'.join(re.findall(r'\*.*behind.*$', git_branch))
        git_other_branches = '\n'.join(re.findall(r'[\n^](?!\*).*behind.*', git_branch))
        git_status = run_command("git -c color.status=always status -sb", repo)

        # Check status
        dirty_status = git_status.count("\n") > 1
        dirty_ahead = "ahead" in git_branch
        dirty_behind_current_branch = "behind" in git_current_branch
        dirty_behind_other_branches = "behind" in git_other_branches

        # Pull if just behind remote
        pulled = False
        if dirty_behind_current_branch and not dirty_ahead and not dirty_status:
            prompt = f"Pull {FAIL}{BOLD}{UNDERLINE}{repo_short_name}:{ENDC}? [y/n]:"
            key_read = ask_input(prompt)
            print(key_read)
            if key_read == 'y' or key_read == 'Y':
                print('Pulling ...')
                stream = sp.Popen(f"cd {repo} && git pull", shell=True)
                pulled = stream.wait() == 0
            print()
        dirty_behind_current_branch = dirty_behind_current_branch and not pulled
        dirty_behind = dirty_behind_other_branches or dirty_behind_current_branch
        dirty_branch = dirty_behind or dirty_ahead
        dirty_repo = dirty_status or dirty_branch
        all_clean = all_clean and not dirty_repo

        # Update dirty report
        if dirty_repo:
            dirty_report.append(f"{FAIL}{BOLD}{UNDERLINE}{repo_short_name}:{ENDC}")

            if dirty_branch:
                dirty_report.append(git_branch)

            if dirty_status:
                dirty_report.append(git_status)

    if all_clean:
        print("All clean!")
    else:
        print("Dirty report")
        print('\n'.join(dirty_report))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-v','--verbose', action="store_true")
    args = parser.parse_args()
    verbose = args.verbose

    config = read_config()
    all_repos = get_repos(config)
    all_repos = filter_repos(all_repos, config['exclude_patterns'])
    fetch_repos(all_repos, verbose)
    print_dirty_repos(all_repos)

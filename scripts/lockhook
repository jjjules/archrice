#!/usr/bin/bash

WAITBEFOREDIM=300
WAITBEFORELOCK=15
WAITBEFORESUSPEND=10

function get_ps() {
	ps aux | grep 'xidlehook' | grep -v 'grep'
}

function is_running() {
	! [ -z "$(get_ps)" ]
}

function get_pid() {
	get_ps | awk '{print $2}'
}

function is_stopped() {
	[[ "$(get_ps | awk '{print $8}')" =~ ^T.* ]]
}

function run_daemon() {
	# Only exported variables can be used within the timer's command.
	export PRIMARY_DISPLAY="$(xrandr | awk '/ primary/{print $1}')"

	xidlehook \
		--not-when-fullscreen \
		--not-when-audio \
		--timer $WAITBEFOREDIM \
			"redshift -oPr -b 0.1 -l '46.55:6.6006'" \
			"redshift -oPr -b 1 -l '46.55:6.6006'" \
		--timer $WAITBEFORELOCK \
			"$SCRIPTS_PATH/lockscreen" "" \
		--timer $WAITBEFORESUSPEND \
			"systemctl suspend" ""
}



if is_stopped
then
	action=START
else
	action=STOP
fi
while [[ $# -gt 0 ]]; do
  case $1 in
    -t|--toogle)
			if is_running
			then
				if is_stopped
				then
					action=START
				else
					action=STOP
				fi
			else
				action=''
			fi
      shift
      ;;
		-c|--continue)
			action=START
			shift
			;;
		-s|--stop)
			action=STOP
			shift
			;;
    *)
      echo "Ignoring inputs given to lockhook"
			shift
      ;;
  esac
done

if [ -z $action ]
then
	exit
fi

if is_running
then
	if [ $action = 'START' ] && is_stopped
	then
		kill -CONT $(get_pid)
		echo Continuing lockhook daemon activity
	elif [ $action = 'STOP' ] && ! $(is_stopped)
	then
		kill -STOP $(get_pid)
		echo Stopping lockhook daemon activity
	fi
elif ! [ $action = 'STOP' ]
then
	echo Running lockhook daemon...
	run_daemon
fi

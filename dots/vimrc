	let mapleader=" "

if filereadable(system('echo -n "$HOME/.vim/bundle/Vundle.vim/autoload/vundle.vim"'))
	" Initialize Vundle
	set rtp+=~/.vim/bundle/Vundle.vim
	call vundle#begin()
		Plugin 'VundleVim/Vundle.vim'
		Plugin 'ycm-core/YouCompleteMe'
		Plugin 'junegunn/fzf.vim'
		" Plugin 'djoshea/vim-autoread'
		Plugin 'tpope/vim-commentary'
		Plugin 'christoomey/vim-system-copy'
		Plugin 'kana/vim-textobj-user'
		Plugin 'kana/vim-textobj-entire'
		Plugin 'kana/vim-textobj-line'
		Plugin 'kana/vim-textobj-underscore'
		Plugin 'michaeljsmith/vim-indent-object'
		Plugin 'JulesssG/targets.vim'
		Plugin 'yegappan/taglist'
		Plugin 'machakann/vim-sandwich'
		Plugin 'lambdalisue/fern.vim'
		Plugin 'easymotion/vim-easymotion'
		Plugin 'tpope/vim-repeat'
		" Plugin 'Yggdroot/indentLine'
		" Plugin 'unblevable/quick-scope'
		" Plugin 'christoomey/vim-titlecase'
		" Plugin 'rhysd/git-messenger.vim'
	call vundle#end()
	" Plugin mappings and options
		"" Fzf
		nnoremap <leader>f		:update<CR>:Files<CR>
		nnoremap <leader>h		:update<CR>:History<CR>
		nnoremap <leader>/		:History/<CR>
		nnoremap <leader>:		:History:<CR>

		"" Commentary
		nmap cm gc

		"" Titlecase
		" let g:titlecase_map_keys = 0
		" nmap <leader>gt <Plug>Titlecase
		" vmap <leader>gt <Plug>Titlecase
		" nmap <leader>gT <Plug>TitlecaseLine

		"" quickscope
		" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
		" let g:ycm_autoclose_preview_window_after_completion=1

		"" Sandwich
		let g:sandwich_no_default_key_mappings = 1
		let g:operator_sandwich_no_default_key_mappings = 1
		let g:textobj_sandwich_no_default_key_mappings = 1
		silent! nmap <unique> Sa <Plug>(operator-sandwich-add)
		silent! xmap <unique> Sa <Plug>(operator-sandwich-add)
		silent! omap <unique> Sa <Plug>(operator-sandwich-g@)
		silent! nmap <unique><silent> Sd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
		silent! nmap <unique><silent> Sr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
		silent! nmap <unique><silent> Sdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
		silent! nmap <unique><silent> Srb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)

		"" Fern
		noremap <leader>e :Fern . -drawer -toggle<CR>
		function! s:init_fern() abort
			nmap <buffer> H <Plug>(fern-action-open:split)
			nmap <buffer> V <Plug>(fern-action-open:vsplit)
			nmap <buffer> F <Plug>(fern-action-new-file)
			nmap <buffer> C <Plug>(fern-action-new-copy)
			nmap <buffer> D <Plug>(fern-action-new-dir)
			nmap <buffer> S <Plug>(fern-action-hidden-toggle)
		endfunction
		augroup fern-custom
			autocmd! *
			autocmd FileType fern call s:init_fern()
		augroup END

		"" Easymotion
		let g:EasyMotion_smartcase = 1
		let g:EasyMotion_move_highlight = 0
		nmap <leader>s <Plug>(easymotion-f)
		nmap <leader>S <Plug>(easymotion-F)
		nmap <leader>d <Plug>(easymotion-f2)
		nmap <leader>D <Plug>(easymotion-F2)
		nmap <leader>; <Plug>(easymotion-next)
		nmap <leader>, <Plug>(easymotion-prev)

		"" IndentLine
		" let g:indentLine_setColors = 0
endif

" Basics behavior and appearance
	if &compatible | set nocompatible | endif " Set nocompatible only if not set to avoid side effects
	set viminfo=<500,'100,:100,/100,h,n~/.vim/viminfo
	set showcmd
	set mouse=a
	set backspace=indent,eol,start
	set number relativenumber
	set textwidth=130
	set encoding=utf-8
	set splitbelow splitright
	set undofile
	set undodir=~/.vim/undo/
	set fillchars+=vert:.
	highlight VertSplit cterm=NONE
	syntax on
	filetype plugin indent on

" Theme
	set bg=light
	hi clear SpellBad
	hi SpellBad cterm=underline ctermfg=Red
	hi SpecialKey ctermfg=8 guifg=gray

" Auto-completion
	set wildmode=longest,list,full
	set completeopt=longest,menuone

" Handle tabs
	set shiftwidth=2
	set tabstop=2
	set autoindent
	set smartindent
	set infercase

" Searching
	set incsearch
	set ignorecase
	set smartcase
	"set hlsearch

" Set to auto read when a file is changed from the outside
	set autoread

" Disables automatic commenting on newline:
" Does not work, see
" https://vim.fandom.com/wiki/Disable_automatic_comment_insertion
	autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Mappings
	" Misc
	nnoremap		<C-S>				:update<CR>
	vnoremap		<C-S>				<C-C>:update<CR>
	inoremap		<C-S>				<C-O>:update<CR>
	nnoremap		<C-6>				:update<C-6>
	map					Q						<Nop>
	noremap			0 ^
	noremap 		^ 0
	nnoremap		<leader>0		^
	nnoremap		n	nzzzv
	nnoremap		N	Nzzzv
	nnoremap		<leader>aw	m':g/^/norm gqq<CR>''zz
	noremap			<leader>ac	:setlocal spell!<CR>
	nnoremap		<leader>i		:b#<CR>
	nnoremap		<leader>r		:call RangerExplorer()<CR>
	nnoremap		<leader>cm	:w<CR>:!mdcompile %:p<CR>
	nnoremap		<leader>o 	:!nohup xdg-open <C-r>=expand("%:t:r")<CR>.pdf &>/dev/null & disown<CR>
	"" Latex
	nnoremap		<leader>cl	:w<CR>:!texsilent %:p<CR>
	function LatexBlock ()
		let name = input("Block name: ")
		exe "norm! I\\begin{" . name . "}\n\\end{" . name . "}\<Esc>=k"
	endfunction
	inoremap		<C-b>				<Esc>:call LatexBlock()<CR>
	"" Incrementing, check https://www.reddit.com/r/vim/comments/gk53u1/just_discovered_ca_and_cx/ for more
	nnoremap + <C-a>


	" Copy and Pasting
	nnoremap		<leader>p "0p
	nnoremap		<leader>P "0P
	nnoremap		Y y$
	vnoremap 		<C-x> "+d :let @*=@+<CR>


	" Normal mode direct action
	nnoremap		 o<Esc>
	nnoremap		<leader> O<Esc>


	" Insert mode direct action
	inoremap		<C-h> <C-o>b
	inoremap		<C-j> <Down>
	inoremap		<C-k> <Up>
	inoremap		<C-l> <Esc>ea
	inoremap		<C-e> <C-o>$
	inoremap		<C-a> <C-o>^

	" Splits
	nnoremap <C-h> <C-w>h
	nnoremap <C-j> <C-w>j
	nnoremap <C-k> <C-w>k
	nnoremap <C-l> <C-w>l


	" Completion
	inoremap <C-Space> <C-n>
	"" Makes Enter key works as expected
	"inoremap <expr> <CR> call pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
	"" Simulates Down key when entering in completion mode
	"inoremap <expr> <C-n> call pumvisible() ? '<C-n>' :
  "\ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Mysterious command for the map of <CR> in normal mode
	autocmd CmdwinEnter * nnoremap <CR> <CR>
	autocmd BufReadPost quickfix nnoremap <CR> <CR>

" When opening a file, put cursor at last position it was in it
autocmd BufReadPost *
	\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
	\ |   exe "normal! g`\""
	\ | endif

" Automatically deletes trailing white spaces on save
	fun! DeleteTrailinfWhiteSpaces()
		if exists('b:noStripWhitespace')
        return
    endif
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
	endfun

	autocmd FileType markdown,rmd,vim let b:noStripWhitespace=1
	autocmd BufWritePre * :call  DeleteTrailinfWhiteSpaces()
	autocmd BufWritePre * :%s,^\s\+$,,e

" :W sudo saves the file
	command W w !sudo tee % > /dev/null

" Set syntax for known files
	autocmd BufNewFile,BufRead *profile set syntax=zsh
	autocmd BufNewFile,BufRead *xinitrc set syntax=sh


" Setup automatic fold
" -> https://vi.stackexchange.com/questions/13864/bufwinleave-mkview-with-unnamed-file-error-32
"
" Add?:
" set viewoptions=folds,cursor
" set sessionoptions=folds
augroup AutoSaveGroup
  autocmd!
  " view files are about 500 bytes
  " bufleave but not bufwinleave captures closing 2nd tab
  " nested is needed by bufwrite* (if triggered via other autocmd)
  " BufHidden for compatibility with `set hidden`
  autocmd BufWinLeave,BufLeave,BufWritePost,BufHidden,QuitPre ?* nested silent! mkview!
  autocmd BufWinEnter ?* silent! loadview
augroup end
set viewoptions-=options	" Avoid directory change because of loadview

	function RangerExplorer()
			exec "silent !ranger --choosefile=/tmp/vim_ranger_current_file " . expand("%:p:h")
			if filereadable('/tmp/vim_ranger_current_file')
					exec 'edit ' . system('cat /tmp/vim_ranger_current_file')
					call system('rm /tmp/vim_ranger_current_file')
			endif
			redraw!
	endfun

" Some funky status bar code its seems
" https://stackoverflow.com/questions/9065941/how-can-i-change-vim-status-line-colour
	set laststatus=2            " set the bottom status bar
	hi statusline guibg=White ctermfg=Gray guifg=DarkSlateGray ctermbg=Black
	set statusline=%f                           " file name
	set statusline+=%{getbufvar(bufnr('%'),'&mod')?'+':''} "modified flag
	set statusline+=\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
	set statusline+=%{&ff}] "file format
	set statusline+=%y      "filetype
	set statusline+=%h      "help file flag
	set statusline+=%r      "read only flag
	set statusline+=\ %=                        " align left
	set statusline+=%l/%L\ %p%%            " line X of Y [percent of file]
	set statusline+=\ %n                    " Buffer number
	set statusline+=\ [%b,0x%B]\               " ASCII and byte code under cursor

" https://vim.fandom.com/wiki/Capitalize_words_in_insert_and_normal_modes_without_moving_the_cursor
"Place in vimrc file
"<F7> for word case toggle & <F8> for word capitalization
"Normal mode mappings:
	nmap <F7> mzg~iw`z
	nmap <F8> mzgUiw`z

	"Insert mode mappings:
	imap <F7> _<Esc>mza<C-Right><Esc>bg~iw`zi<Del>
	imap <F8> _<Esc>mza<C-Right><Esc>bgUiw`zi<Del>
